一：
  通过 map filter reduce 这些函数实现低层次的转换，通过开发者自定义高阶函数来调整低层次运转机制的运作。
  
二：
  filter map reduce 是函数式编程里的 具有普遍意义的基本构造单元 (三板斧)
  filter (过滤)
  map    (映射)
  reduce (折叠/化约)
  
三：
  不论层次高低，抽象的目的总是一样: 从繁琐的细节里走出来，去解决问题里非重复的部分
  函数式语言里 向语言和运行时让渡控制权的5种途径，
  1. 迭代让位于高阶函数
  2. 闭包 (抓住上下文，而非状态)
  3. 柯里化 和 函数部分施用(partial application)
    柯里化:   func(x, y, x)  ===>  func(x)(y)(z)   func 处理完 x 后 返回一个函数继续处理 y 然后依次类推 ... 
    部分施用: func(x, y, z) ===> func(y, z) ===> func(z)  
    一些应用: 1. 工厂方法模式   2. 模板方法模式
  4. 递归  (利用递归，将状态管理的职责转交给了运行时)
  5. 处理流程重排(改变原来的处理流程)
  
四：
  函数记忆(缓存值，将曾经计算过的值缓存起来，当再次调用时 直接取出 [只有纯函数才可以使用] )  通过闭包实现记忆
  *** 静态的方法 应该就是这里的 纯函数 ***
  
  缓求值/懒加载  数据按需取得，按需回收
  
五:
  与面相对象语言相比(重用单元是类和类间通信的消息)，函数式语言重用体现在 函数的通用性上，他们鼓励在数据结构上使用各种通用的变换
  并且通过高阶函数来调整操作 以满足不同的需求
  
